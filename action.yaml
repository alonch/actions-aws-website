name: 'Actions AWS Website'
description: 'Provision all the resource required to host a website in AWS'
inputs:
  domain: 
    description: 'Domain of your AWS Hosted Zone'
    required: true
  subdomain:
    description: 'Optional subdomain'
    required: false
    default: ''
  path:
    description: 'folder to publish'
  action: 
    description: "desire outcome: apply, plan or destroy"
    required: false
    default: "plan"

runs:
  using: "composite"
  steps:
    - uses: hashicorp/setup-terraform@v3
    - name: init 
      shell: bash
      run: |
        terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_s3 }}" \
          -backend-config="dynamodb_table=${{ env.TF_BACKEND_dynamodb }}" \
          -backend-config="key=${{inputs.subdomain}}.${{inputs.domain}}" 
    - name: search hosted zone domain
      shell: bash
      id: route53
      env: 
        DOMAIN: ${{ inputs.domain }}
      # search the closest hosted zone for example: 
      #  domain:abc.example.com will match a hosted zone with: 
      #  - abc.example.com 
      #  - example.com
      run: |
        HOSTED_ZONE_DOMAIN=$(aws route53 list-hosted-zones --output json | \
          jq -r '.HostedZones[].Name' | \
          python3 search-hosted-zone.py ${{ env.DOMAIN }}
        echo "hosted-zone-domain=$HOSTED_ZONE_DOMAIN" >> $GITHUB_OUTPUT

    - name: run action
      shell: bash
      env: 
        TF_VAR_hosted_zone_domain: ${{ steps.route53.outputs.hosted-zone-domain }}
        TF_VAR_domain: ${{ inputs.domain }}
        ACTION: ${{ inputs.action }}
        # if action is plan add '-auto-aprove' to run
        ACTION_ARGS: ${{ inputs.action != 'plan' && '-auto-approve' || '' }} 
      run: terraform ${{ env.ACTION }} ${{ env.ACTION_ARGS }}
    - name: set outputs
      if: ${{ inputs.action == 'apply' }}
      shell: bash
      run: |
        terraform output -raw bucket_name
        ACTIONS_AWS_WEBSITE_BUCKET=$(terraform output -raw bucket_name)
        if [ -n "$ACTIONS_AWS_WEBSITE_BUCKET" ]; then 
          echo "ACTIONS_AWS_WEBSITE_BUCKET=$ACTIONS_AWS_WEBSITE_BUCKET" >> $GITHUB_ENV
          echo "domain-bucket=$ACTIONS_AWS_WEBSITE_BUCKET" >> $GITHUB_OUTPUT
        fi
        
        ACTIONS_AWS_WEBSITE=$(terraform output -raw domain)
        if [ -n "$ACTIONS_AWS_WEBSITE" ]; then
          echo "ACTIONS_AWS_WEBSITE=$ACTIONS_AWS_WEBSITE" >> $GITHUB_ENV
          echo "website=$ACTIONS_AWS_WEBSITE" >> $GITHUB_OUTPUT
        fi

            
      